# PEP 8 스타일 가이드를 따르라
# PEP : Python Enhancement Proposal (파이썬 개선 제안)

# 1. 공백
#   - 중요한 들여쓰기에는 4칸 스페이스
#   - 파일 안에서 각 함수와 클래스 사이에는 빈 줄을 두 줄 넣기
#   - 클래스 안에서 메서드와 메서드 사이에는 빈 줄을 한 줄 넣기
#   - 딕셔너리에서 키와 콜론 사이에는 공백 넣기 x, 한 줄 안에 키와 값을 같이 넣는 경우에는 콜론 다음에 스페이스 하나 넣기
#   - 변수 대입에서 = 전후에는 스페이스 하나씩
#   - 타입 표기시 변수 이름과 콜론 사이에는 공백을 넣지 않고, 콜론과 타입 정보 사이에 스페이스를 하나씩 넣기

# 2. 명명 규약
#   - 함수, 변수, 애트리뷰트는 소문자와 밑줄을 사용 (snake case)
#   - 보호돼야 하는 인스턴스 애트리뷰트는 일반적인 규칙을 따르되, _ 밑줄로 시작한다.
#   - private 인스턴스 애트리뷰트는 일반적인 규칙을 따르되, 밑줄 두 개로 시작한다.
#   - 클래스는 여러 단어를 이어 붙이되, 각 단어의 첫 글자를 대문자로 만든다 (Pascal Case)
#   - 모듈 수준의 상수는 모든 글자를 대문자로 하고, 단어와 단어 사이를 밑줄로 연결한다

# 3. 식과 문
#    - 긍정적인 식을 부정하지 말고 (if not a is b), 부정을 내부에 넣어라 (if a is not b)
#    - 빈 컨테이너나 시퀀스 ([]나 '' 등)을 검사할 때는 길이를 0과 비교하지 말아라(if len(someting) == 0)
#     빈 컨테이너나 시퀀스 값이 암묵적으로 False로 취급된다는 사실을 활용해 'if not 컨테이너' 라는 조건문을 써라
#    - 마찬가지로 비어 있지 않은 컨테이너나 시퀀스는 길이가 0보다 큰지 비교 하지 말고, 'if 컨테이너' 를 활용하자
#    - 한 줄짜리 if, for, while, except를 사용하지 말아라. 명확성을 위해 각 부분을 여러 줄에 나눠서 배치해라
#    - 식을 한 줄 안에 다 쓸 수 없는 경우, 식을 괄호로 둘러싸고 줄바꿈과 들여쓰기를 추가해서 읽기 쉽게 만들자
#    - 여러 줄에 걸쳐 식을 쓸 때는 줄이 계속된다는 표시를 하는 \ 문자보다는 괄호를 사용하자

# 4. 임포트
#    - import문을 항상 파일 맨 앞에 위치시켜라
#    - 모듈을 임포트할 때 절대적인 이름을 사용하고, 현 모듈의 경로에 상대적인 이름은 사용하지 말자
#     ex) foo 모듈을 임포트한다면 from bar import foo 라고 해야하고, import foo 라고 하면 안된다
#    - 반드시 상대적인 경로로 임포트해야 하는 경우에는 from . import foo 처럼 명시적인 구문을 사용하자
#    - import를 적을 때는 표준 라이브러리 모듈, 서드 파티 모듈, 직접 만든 모듈 순서로 섹션을 나누자. 각 섹션에는 알파벳 순서로 모듈을 임포트 해라.