# 시퀀스를 슬라이싱하는 방법을 익혀라

# 슬라이싱 구문의 기본 형태는 리스트[시작:끝] 이다
# 시작 인덱스는 슬라이스에 포함, 끝 인덱스는 포함 되지 않는다.

a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
print('가운데 2개: ', a[3:5])
print('마지막을 제외한 나머지: ', a[0:7])

# 리스트의 맨 앞부터 슬라이싱할 때는 시각적 잡음을 없애기 위해 0 생략
assert a[:5] == a[0:5]

#리스트의 끝까지 슬라이싱할 때는 쓸데없이 끝 인덱스를 적지 말기
assert a[5:] == a[5:len(a)]

# 리스트를 슬라이싱한 결과는 완전히 새로운 리스트이다.
# 원래 리스트에 대한 참조는 그대로 유지, 슬라이싱한 결과를 변경해도 원래 리스트는 바뀌지 않음
b = a[3:]
print('이전: ', b)
b[1] = 99
print('이후: ', b)
print('변화 없음: ', a)

# 리스트에 지정한 슬라이스 길이보다 대입되는 배열의 길이가 더 짧기 때문에 리스트가 줄어든다.
print('이전: ', a)
a[2:7] = [99, 22, 14]
print('이후: ', a)

# 리스트에 지정한 슬라이스 길이보다 대입되는 배열의 길이가 더 길기 때문에 리스트가 늘어난다.

print('이전: ', a)
a[2:3] = [47, 11]
print('이후: ', a)

# 슬라이싱 시작과 끝 인덱스를 모두 생략하면 원래 리스트를 복사한 새 리스트를 얻는다.
b = a[:]
assert b == a and b is not a

# 시작과 끝 인덱스가 없는 슬라이스에 대입하면 (새 리스트를 만들어내는 대신) 참조하는 리스트의 내용을 대입하는 리스트(연산자 오른쪽)의 복사본으로 덮어 쓴다.
b = a
print('이전: ', a)
print('이전: ', b)
a[:] = [101, 102, 103]
assert a is b
print('이후: ', a)
print('이후: ', b)
